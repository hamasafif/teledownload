import osimport timeimport asynciofrom dotenv import load_dotenvfrom telethon.sync import TelegramClientfrom telethon.tl.types import MessageMediaDocument, DocumentAttributeVideofrom telethon.tl.types import DocumentAttributeFilenamefrom tkinter import Tk, filedialogfrom tqdm import tqdm# Load konfigurasi dari .envload_dotenv()api_id = int(os.getenv("API_ID"))api_hash = os.getenv("API_HASH")session_name = os.getenv("SESSION_NAME", "anon")# ASCII Artdef tampilkan_header():    print(r"""‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù   ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù                                                                                                             """)    print("Autodownload File untuk penyimpanan file di Telegram")    print("Created by WR JUNIOR\n")# Reset sessiondef reset_session():    if os.path.exists(f"{session_name}.session"):        os.remove(f"{session_name}.session")        print("‚úÖ Session berhasil dihapus.")    else:        print("‚ÑπÔ∏è  Tidak ada session yang perlu dihapus.")# GUI untuk pilih folderdef pilih_folder():    root = Tk()    root.withdraw()    folder = filedialog.askdirectory(title="Pilih folder penyimpanan")    return folder# Fungsi navigasi chatdef pilih_chat(dialogs):    halaman = 0    per_halaman = 10    total = len(dialogs)    while True:        start = halaman * per_halaman        end = start + per_halaman        if start >= total:            print("üö´ Tidak ada chat lagi.")            return None        print("\nüìã Daftar Chat:")        for i, dialog in enumerate(dialogs[start:end], start=1):            print(f"{i}. {dialog.name}")        print("\nn. Halaman Berikutnya")        print("p. Halaman Sebelumnya")        print("q. Keluar")        pilihan = input("Pilih nomor chat, 'n' untuk next, 'p' untuk prev, atau 'q' untuk keluar: ").strip()        if pilihan == 'q':            return None        elif pilihan == 'n':            halaman += 1        elif pilihan == 'p':            halaman = max(0, halaman - 1)        elif pilihan.isdigit():            nomor = int(pilihan)            if 1 <= nomor <= (end - start):                return dialogs[start + nomor - 1].entity            else:                print("‚ùå Nomor tidak valid.")        else:            print("‚ùå Input tidak dikenali.")# Fungsi untuk memperbarui progres dan kecepatandef update_progress(downloaded, total, pbar, start_time):    elapsed_time = time.time() - start_time    percent = (downloaded / total) * 100 if total else 0    pbar.update(percent - pbar.n)    if elapsed_time > 0:        speed = downloaded / 1024 / 1024 / elapsed_time  # MB/s        pbar.set_postfix_str(f"Kecepatan: {speed:.2f} MB/s")# Fungsi utamaasync def download_media():    async with TelegramClient(session_name, api_id, api_hash) as client:        print("‚úÖ Login berhasil.")        dialogs = await client.get_dialogs()        target = pilih_chat(dialogs)        if not target:            print("‚ùå Tidak ada chat dipilih.")            return        # Pilih ekstensi file        print("\nPilih jenis file yang ingin di-download:")        ekstensi_list = ['.txt', '.pdf', '.doc', '.mp4', '.jpeg']        for i, ext in enumerate(ekstensi_list, start=1):            print(f"{i}. {ext}")        try:            pilihan_ext = int(input("Masukkan nomor ekstensi: ").strip())            ekstensi = ekstensi_list[pilihan_ext - 1]        except:            print("‚ùå Pilihan tidak valid.")            return        print(f"üîç Mencari file dengan ekstensi {ekstensi}...")        messages = []        async for msg in client.iter_messages(target, reverse=True):            if isinstance(msg.media, MessageMediaDocument):                for attr in msg.media.document.attributes:                    if isinstance(attr, DocumentAttributeFilename) and attr.file_name.lower().endswith(ekstensi):                        messages.append(msg)        if not messages:            print("üö´ Tidak ditemukan file dengan ekstensi tersebut.")            return        print(f"‚úÖ Ditemukan {len(messages)} file dengan ekstensi {ekstensi}.")        try:            jumlah_file = input("Berapa file yang ingin di-download? (atau 'all'): ").strip()            jumlah_file = int(jumlah_file) if jumlah_file.isdigit() else 'all'        except:            jumlah_file = 'all'        try:            mulai_urut = int(input("Mulai dari file ke-berapa? ").strip())        except ValueError:            mulai_urut = 1        folder = pilih_folder()        if not folder:            print("‚ùå Tidak ada folder dipilih.")            return        messages = sorted(messages, key=lambda m: m.id)        filtered_messages = list(enumerate(messages, start=1))        filtered_messages = [(i, m) for i, m in filtered_messages if i >= mulai_urut]        if jumlah_file != 'all':            filtered_messages = filtered_messages[:jumlah_file]        count = 0        for urut, msg in filtered_messages:            filename = msg.file.name if msg.file and msg.file.name else f"file_{urut}{ekstensi}"            path = os.path.join(folder, filename)            if os.path.exists(path) and os.path.getsize(path) > 0:                print(f"‚úÖ Lewati (sudah ada): {filename}")                continue            print(f"‚¨áÔ∏è  Mengunduh {filename}...")            start_time = time.time()            try:                with tqdm(total=100, desc=filename, unit='%', ncols=100) as pbar:                    await client.download_media(                        msg,                        file=path,                        progress_callback=lambda d, t: update_progress(d, t, pbar, start_time)                    )                end_time = time.time()                size_mb = os.path.getsize(path) / 1024 / 1024                speed = size_mb / (end_time - start_time)                print(f"‚úÖ Selesai: {filename} | {size_mb:.2f} MB | Kecepatan: {speed:.2f} MB/s\n")                count += 1                if count % 20 == 0:                    print("‚è± Jeda 1 menit setelah 20 file...")                    time.sleep(60)            except Exception as e:                print(f"‚ùå Gagal download {filename}: {e}")# Mainif __name__ == "__main__":    tampilkan_header()    print("1. Akses Channel dan Download")    print("2. Reset Session (Login Ulang)")    pilihan = input("Pilih opsi (1/2): ").strip()    if pilihan == '1':        asyncio.run(download_media())    elif pilihan == '2':        reset_session()    else:        print("‚ùå Pilihan tidak valid.")